@router.put('/update/{user_id}', response_model=UpdateUser) 
async def update_user(user_id: int, user: UpdateUser , db: Annotated[Session, Depends(get_db)]):
    try:
       
        existing_user = db.query(User).filter(User.id == user_id).first()
        if not existing_user:
            raise HTTPException(status_code=404, detail="User  not found")

       
        for key, value in user.model_dump().items():
            setattr(existing_user, key, value)

        db.commit()
        db.refresh(existing_user) 
        return existing_user
    except Exception as e:
        logger.error(f"Error updating user: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")


@router.delete('/delete/{user_id}')
async def delete_user(user_id: int, db: Annotated[Session, Depends(get_db)]):
    try:
       
        existing_user = db.query(User).filter(User.id == user_id).first()
        if not existing_user:
            raise HTTPException(status_code=404, detail="User  not found")

        db.delete(existing_user) 
        db.commit()
        return 
    except Exception as e:
        logger.error(f"Error deleting user: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")